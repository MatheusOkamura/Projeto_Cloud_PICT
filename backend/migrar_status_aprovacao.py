"""
Script para migrar o banco de dados para o novo sistema de aprova√ß√£o em duas etapas.
Adiciona novas colunas e atualiza status existentes.
"""
from sqlalchemy import text
from database import SessionLocal, engine
from models.database_models import Inscricao, StatusInscricao
import sys

def migrar_banco():
    """Adiciona as novas colunas ao banco de dados"""
    db = SessionLocal()
    
    try:
        print("\n" + "="*70)
        print("   MIGRA√á√ÉO: Sistema de Aprova√ß√£o em Duas Etapas")
        print("="*70 + "\n")
        
        # Adicionar novas colunas se n√£o existirem
        print("üìù Adicionando novas colunas...")
        
        colunas_novas = [
            ("feedback_orientador", "TEXT"),
            ("feedback_coordenador", "TEXT"),
            ("data_avaliacao_orientador", "TIMESTAMP"),
            ("data_avaliacao_coordenador", "TIMESTAMP")
        ]
        
        for coluna, tipo in colunas_novas:
            try:
                db.execute(text(f"ALTER TABLE inscricoes ADD COLUMN {coluna} {tipo}"))
                print(f"   ‚úÖ Coluna '{coluna}' adicionada")
            except Exception as e:
                if "duplicate column name" in str(e).lower():
                    print(f"   ‚ÑπÔ∏è  Coluna '{coluna}' j√° existe")
                else:
                    print(f"   ‚ö†Ô∏è  Erro ao adicionar coluna '{coluna}': {str(e)}")
        
        db.commit()
        
        # Atualizar status existentes
        print("\nüîÑ Atualizando status das inscri√ß√µes existentes...")
        
        inscricoes = db.query(Inscricao).all()
        total = len(inscricoes)
        
        if total == 0:
            print("   ‚ÑπÔ∏è  N√£o h√° inscri√ß√µes para migrar")
        else:
            print(f"   Encontradas {total} inscri√ß√£o(√µes)\n")
            
            for inscricao in inscricoes:
                status_antigo = inscricao.status.value if hasattr(inscricao.status, 'value') else str(inscricao.status)
                
                # Mapear status antigos para novos
                if status_antigo == "pendente":
                    inscricao.status = StatusInscricao.pendente_orientador
                    print(f"   ID {inscricao.id}: pendente ‚Üí pendente_orientador")
                
                elif status_antigo == "aprovada":
                    # Propostas j√° aprovadas permanecem aprovadas
                    inscricao.status = StatusInscricao.aprovada
                    print(f"   ID {inscricao.id}: aprovada (mantido)")
                
                elif status_antigo == "rejeitada":
                    # Propostas rejeitadas migram para rejeitada_coordenador (decis√£o final)
                    inscricao.status = StatusInscricao.rejeitada_coordenador
                    print(f"   ID {inscricao.id}: rejeitada ‚Üí rejeitada_coordenador")
            
            db.commit()
            print(f"\n   ‚úÖ {total} inscri√ß√£o(√µes) migrada(s) com sucesso!")
        
        print("\n" + "="*70)
        print("   ‚úÖ MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!")
        print("="*70 + "\n")
        
        print("üìã Novo fluxo de aprova√ß√£o:")
        print("   1. Aluno submete proposta ‚Üí status: pendente_orientador")
        print("   2. Orientador aprova ‚Üí status: pendente_coordenador")
        print("   3. Coordenador aprova ‚Üí status: aprovada (projeto criado)")
        print("\n   Em caso de rejei√ß√£o:")
        print("   - Orientador rejeita ‚Üí status: rejeitada_orientador")
        print("   - Coordenador rejeita ‚Üí status: rejeitada_coordenador\n")
        
    except Exception as e:
        db.rollback()
        print(f"\n‚ùå Erro durante a migra√ß√£o: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
    finally:
        db.close()

def verificar_status():
    """Verifica o status atual das inscri√ß√µes"""
    db = SessionLocal()
    try:
        inscricoes = db.query(Inscricao).all()
        
        if not inscricoes:
            print("‚ÑπÔ∏è  N√£o h√° inscri√ß√µes no banco de dados")
            return
        
        print(f"\nüìä Status das inscri√ß√µes ({len(inscricoes)} total):\n")
        
        status_count = {}
        for inscricao in inscricoes:
            status = inscricao.status.value
            status_count[status] = status_count.get(status, 0) + 1
        
        for status, count in status_count.items():
            print(f"   {status}: {count}")
        
        print()
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar status: {str(e)}")
    finally:
        db.close()

if __name__ == "__main__":
    print("\nEscolha uma op√ß√£o:")
    print("1 - Executar migra√ß√£o")
    print("2 - Verificar status das inscri√ß√µes")
    print("0 - Sair")
    
    opcao = input("\nOp√ß√£o: ")
    
    if opcao == "1":
        confirmacao = input("\n‚ö†Ô∏è  Isso vai modificar o banco de dados. Continuar? (s/N): ")
        if confirmacao.lower() == 's':
            migrar_banco()
        else:
            print("‚ùå Migra√ß√£o cancelada")
    elif opcao == "2":
        verificar_status()
    else:
        print("Saindo...")
