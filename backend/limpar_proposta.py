"""
Script para limpar propostas de teste do banco de dados
"""
from sqlalchemy.orm import Session
from database import SessionLocal, engine
from models.database_models import Inscricao, Usuario, Projeto, Entrega
import sys

def limpar_proposta_aluno_teste():
    """Remove a proposta do aluno teste"""
    db = SessionLocal()
    try:
        # Buscar o aluno teste
        aluno_teste = db.query(Usuario).filter(
            Usuario.email == "aluno.teste@alunos.ibmec.edu.br"
        ).first()
        
        if not aluno_teste:
            print("‚ùå Aluno teste n√£o encontrado no banco de dados")
            return
        
        print(f"‚úÖ Aluno teste encontrado: {aluno_teste.nome} (ID: {aluno_teste.id})")
        
        # Buscar inscri√ß√µes do aluno
        inscricoes = db.query(Inscricao).filter(
            Inscricao.usuario_id == aluno_teste.id
        ).all()
        
        if not inscricoes:
            print("‚ÑπÔ∏è  Aluno teste n√£o possui inscri√ß√µes/propostas")
            return
        
        print(f"üìã Encontradas {len(inscricoes)} inscri√ß√£o(√µes)")
        
        # Deletar inscri√ß√µes
        for inscricao in inscricoes:
            print(f"   - Deletando inscri√ß√£o ID {inscricao.id}: {inscricao.titulo_projeto}")
            
            # Verificar se h√° projetos vinculados
            projetos = db.query(Projeto).filter(
                Projeto.inscricao_id == inscricao.id
            ).all()
            
            if projetos:
                print(f"   ‚ö†Ô∏è  Encontrados {len(projetos)} projeto(s) vinculado(s)")
                for projeto in projetos:
                    # Deletar entregas do projeto
                    entregas = db.query(Entrega).filter(
                        Entrega.projeto_id == projeto.id
                    ).all()
                    if entregas:
                        print(f"      - Deletando {len(entregas)} entrega(s)")
                        for entrega in entregas:
                            db.delete(entrega)
                    
                    # Deletar projeto
                    print(f"      - Deletando projeto ID {projeto.id}")
                    db.delete(projeto)
            
            # Deletar inscri√ß√£o
            db.delete(inscricao)
        
        db.commit()
        print("\n‚úÖ Proposta(s) deletada(s) com sucesso!")
        print("   O aluno teste agora pode submeter uma nova proposta")
        
    except Exception as e:
        db.rollback()
        print(f"\n‚ùå Erro ao deletar proposta: {str(e)}")
    finally:
        db.close()

def limpar_todas_inscricoes():
    """Remove TODAS as inscri√ß√µes do banco (cuidado!)"""
    db = SessionLocal()
    try:
        # Contar inscri√ß√µes
        total_inscricoes = db.query(Inscricao).count()
        
        if total_inscricoes == 0:
            print("‚ÑπÔ∏è  N√£o h√° inscri√ß√µes no banco de dados")
            return
        
        print(f"‚ö†Ô∏è  ATEN√á√ÉO: Voc√™ est√° prestes a deletar {total_inscricoes} inscri√ß√£o(√µes)")
        confirmacao = input("   Digite 'SIM' para confirmar: ")
        
        if confirmacao != "SIM":
            print("‚ùå Opera√ß√£o cancelada")
            return
        
        # Deletar todos os projetos e entregas vinculados
        projetos = db.query(Projeto).all()
        for projeto in projetos:
            entregas = db.query(Entrega).filter(Entrega.projeto_id == projeto.id).all()
            for entrega in entregas:
                db.delete(entrega)
            db.delete(projeto)
        
        # Deletar todas as inscri√ß√µes
        db.query(Inscricao).delete()
        db.commit()
        
        print("‚úÖ Todas as inscri√ß√µes foram deletadas!")
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå Erro ao deletar inscri√ß√µes: {str(e)}")
    finally:
        db.close()

def listar_inscricoes():
    """Lista todas as inscri√ß√µes no banco"""
    db = SessionLocal()
    try:
        inscricoes = db.query(Inscricao).all()
        
        if not inscricoes:
            print("‚ÑπÔ∏è  N√£o h√° inscri√ß√µes no banco de dados")
            return
        
        print(f"\nüìã Total de {len(inscricoes)} inscri√ß√£o(√µes):\n")
        for insc in inscricoes:
            usuario = db.query(Usuario).filter(Usuario.id == insc.usuario_id).first()
            print(f"ID: {insc.id}")
            print(f"   Aluno: {insc.nome} ({usuario.email if usuario else 'N/A'})")
            print(f"   T√≠tulo: {insc.titulo_projeto}")
            print(f"   Status: {insc.status.value}")
            print(f"   Data: {insc.data_submissao}")
            print()
        
    except Exception as e:
        print(f"‚ùå Erro ao listar inscri√ß√µes: {str(e)}")
    finally:
        db.close()

if __name__ == "__main__":
    print("\n" + "="*60)
    print("   SCRIPT DE LIMPEZA DE PROPOSTAS")
    print("="*60 + "\n")
    
    if len(sys.argv) > 1:
        opcao = sys.argv[1]
    else:
        print("Escolha uma op√ß√£o:")
        print("1 - Deletar proposta do aluno teste")
        print("2 - Deletar TODAS as inscri√ß√µes (cuidado!)")
        print("3 - Listar inscri√ß√µes")
        print("0 - Sair")
        opcao = input("\nOp√ß√£o: ")
    
    if opcao == "1":
        limpar_proposta_aluno_teste()
    elif opcao == "2":
        limpar_todas_inscricoes()
    elif opcao == "3":
        listar_inscricoes()
    else:
        print("Saindo...")
